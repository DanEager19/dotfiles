!function(n){var t={};function g(e){if(t[e])return t[e].exports;var I=t[e]={i:e,l:!1,exports:{}};return n[e].call(I.exports,I,I.exports,g),I.l=!0,I.exports}g.m=n,g.c=t,g.d=function(n,t,e){g.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:e})},g.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},g.t=function(n,t){if(1&t&&(n=g(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(g.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var I in n)g.d(e,I,function(t){return n[t]}.bind(null,I));return e},g.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return g.d(t,"a",t),t},g.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},g.p="",g(g.s=0)}([function(module,exports){eval("const vscode = acquireVsCodeApi();\nlet fullPageContent = {};\nlet filteredContent = {};\nlet fpcCounter = -1;\nlet filterMatched = false;\nlet schemaColors;\nlet defaultContainer;\nlet isToBottom = false;\nlet isFollowRun = false;\nlet lastScrollTop = 0;\nlet typingTimer;\n\nwindow.addEventListener('message', (event) => {\n    const message = event.data;\n    switch (message.command) {\n        case 'init': {\n            const containers = message.containers;\n            schemaColors = JSON.parse(message.colors);\n            if (containers.length === 1) {\n                defaultContainer = containers[0];\n                return;\n            }\n\n            const containersPanel = document.getElementById('containers-panel');\n            containersPanel.classList.remove('display-none');\n            containersPanel.classList.add('display-inline-block');\n\n            const select = createElement('vscode-select');\n            select.setAttribute('id', 'containers-select');\n            // eslint-disable-next-line @typescript-eslint/prefer-for-of\n            for (let i = 0; i < containers.length; i += 1) {\n                const option = createElement('vscode-option', containers[i], containers[i]);\n                if (i === 0) {\n                    option.setAttribute('selected', '');\n                }\n                select.appendChild(option);\n            }\n            containersPanel.appendChild(select);\n        }\n        case 'content': {\n            const text = message.text.replace(/\\n$/, '');\n            if (!text) {\n                return;\n            }\n            const newContent = text.split('\\n');\n            updateContent(newContent);\n        }\n    }\n});\n\nfunction debounce(func, wait, immediate) {\n    let timeout;\n    return function () {\n        const context = this, args = arguments;\n        const later = function () {\n            timeout = null;\n            if (!immediate) {\n                func.apply(context, args);\n            }\n        };\n        const callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) {\n            func.apply(context, args);\n        }\n    };\n}\n\nfunction createElement(type, value, content) {\n    const element = document.createElement(type);\n    if (value) { element.value = value; }\n    if (content) { element.textContent = content; }\n    return element;\n}\n\nfunction init() {\n    const runBtn = document.getElementById('runBtn');\n    runBtn.addEventListener('click', (_event) => {\n        changeVisibilityAfterRun();\n        startLog();\n    });\n\n    const stopBtn = document.getElementById('stopBtn');\n    stopBtn.addEventListener('click', (_event) => {\n        isFollowRun = false;\n        changeVisibilityAfterStop();\n        stopLog();\n    });\n\n    const clearBtn = document.getElementById('clearBtn');\n    clearBtn.addEventListener('click', (_event) => {\n        changeVisibilityAfterClear();\n        clear();\n    });\n\n    const resetBtn = document.getElementById('resetBtn');\n    resetBtn.addEventListener('click', (_event) => {\n        reset();\n    });\n\n    const bottomBtn = document.getElementById('bottomBtn');\n    bottomBtn.addEventListener('click', (_event) => {\n        scrollToBottom();\n    });\n\n    const wrapChk = document.getElementById('wrap-chk');\n    wrapChk.addEventListener('vsc-change', function (event) {\n        if (event.detail.checked) {\n            document.getElementById('content').classList.remove('white-space-pre');\n            document.getElementById('content').classList.add('white-space-wrap');\n        } else {\n            document.getElementById('content').classList.remove('white-space-wrap');\n            document.getElementById('content').classList.add('white-space-pre');\n        }\n    });\n\n    const filterSelect = document.getElementById('filter-select');\n    filterSelect.addEventListener('vsc-change', (_event) => {\n        resetFilter();\n        if (isRun() && document.getElementById('filter-input').value) {\n            runFilter();\n        }\n    });\n\n    const filterInput = document.getElementById('filter-input');\n    filterInput.addEventListener('keyup', (_event) => {\n        resetFilter();\n        if (!isRun() || document.getElementById('filter-select').value === 'all') {\n            return;\n        }\n        if (typingTimer) {\n            clearTimeout(typingTimer);\n        }\n        typingTimer = setTimeout(runFilter, 500);\n    });\n\n    const logPanel = document.getElementById('logPanel');\n    const toBottom = debounce(function () {\n        const st = logPanel.scrollTop;\n        if (st > lastScrollTop) {\n            // scroll down\n            isToBottom = (logPanel.scrollTop + window.innerHeight) >= logPanel.scrollHeight;\n        } else {\n            // scroll up\n            isToBottom = false;\n        }\n        lastScrollTop = st <= 0 ? 0 : st;\n        renderByPagination();\n    }, 250);\n    logPanel.addEventListener(\"scroll\", toBottom);\n}\n\nfunction resetContent() {\n    fullPageContent = {};\n    fpcCounter = -1;\n}\n\nfunction resetFilter() {\n    filteredContent = {};\n    filterMatched = false;\n}\n\nfunction runFilter() {\n    emptyContent();\n    saveFilteredContent();\n    setHeightContentPanel();\n    renderByPagination();\n}\n\nfunction changeVisibilityAfterRun() {\n    if (getToTerminal()) {\n        return;\n    }\n    document.getElementById('runBtn').classList.add('display-none');\n    if (isFollow()) {\n        switchClass('stopBtn', 'display-none', 'display-inline-block');\n    }\n    switchClass('clearBtn', 'display-none', 'display-inline-block');\n}\n\nfunction changeVisibilityAfterClear() {\n    if (document.getElementById('stopBtn').classList.contains('display-none')) {\n        switchClass('clearBtn', 'display-inline-block', 'display-none');\n        switchClass('runBtn', 'display-none', 'display-inline-block');\n    }\n}\n\nfunction changeVisibilityAfterStop() {\n    switchClass('stopBtn', 'display-inline-block', 'display-none');\n}\n\nfunction switchClass(id, classToRemove, classToAdd) {\n    const element = document.getElementById(id);\n    if (element.classList.contains(classToRemove)) {\n        element.classList.remove(classToRemove);\n    }\n    if (!element.classList.contains(classToAdd)) {\n        element.classList.add(classToAdd);\n    }\n}\n\nfunction isRun() {\n    return document.getElementById('runBtn').classList.contains('display-none');\n}\n\nfunction isFilterEnabled() {\n    const filterInput = document.getElementById('filter-input').value;\n    const mode = document.getElementById('filter-select').value;\n    return filterInput.length > 0 && mode !== 'all';\n}\n\nfunction startLog() {\n    resetContent();\n    resetFilter();\n    clear();\n    isFollowRun = isFollow();\n    const options = {\n        container: getContainer(),\n        follow: isFollowRun,\n        timestamp: document.getElementById('timestamp-chk').checked,\n        since: getSinceDuration(),\n        tail: getTail(),\n        terminal: getToTerminal()\n    };\n    vscode.postMessage({\n        command: 'start',\n        options: JSON.stringify(options)\n    });\n}\n\nfunction stopLog() {\n    vscode.postMessage({\n        command: 'stop'\n    });\n}\n\nfunction clear() {\n    if (!isFollowRun) {\n        resetContent();\n        resetFilter();\n    }\n    setHeightContentPanel(true);\n    emptyContent();\n}\n\nfunction reset() {\n    const containersSelect = document.getElementById('containers-select');\n    if (containersSelect) {\n        containersSelect.selectedIndex = 0;\n    }\n    document.getElementById('follow-chk').checked = false;\n    document.getElementById('timestamp-chk').checked = false;\n    document.getElementById('since-input').value = '0';\n    document.getElementById('since-select').selectedIndex = 0;\n    document.getElementById('tail-input').value = '-1';\n    document.getElementById('terminal-chk').checked = false;\n}\n\nfunction updateContent(newContent) {\n    let content = {};\n    let counter = 0;\n\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < newContent.length; i += 1) {\n        if (newContent[i].length > 0) {\n            content[counter] = newContent[i];\n            fpcCounter++;\n            fullPageContent[fpcCounter] = newContent[i];\n            counter++;\n        }\n    }\n    content = saveFilteredContent(content);\n    setHeightContentPanel();\n    renderByPagination(content);\n    switchClass('clearBtn', 'display-none', 'display-inline-block');\n}\n\nfunction setHeightContentPanel(removeStyle) {\n    if (removeStyle) {\n        document.getElementById('innerLogPanel').style.removeProperty('height');\n    } else {\n        const content = isFilterEnabled() ? filteredContent : fullPageContent;\n        const rows = Object.keys(content).length;\n        const heightDiv = getDefaultDivHeightValue();\n        document.getElementById('innerLogPanel').style.height = `${heightDiv * rows}px`;\n    }\n}\n\nfunction saveFilteredContent(content) {\n    const filterInput = document.getElementById('filter-input').value;\n    const mode = document.getElementById('filter-select').value;\n    let contentAfterFilter;\n    if (filterInput.length > 0 && mode !== 'all') {\n        contentAfterFilter = filter(content);\n        let fcRows = Object.keys(filteredContent).length - 1;\n        if (fcRows === -1) {\n            filteredContent = contentAfterFilter;\n            return contentAfterFilter;\n        }\n        for (let i = 0; i < Object.keys(contentAfterFilter).length; i += 1) {\n            fcRows++;\n            filteredContent[fcRows] = contentAfterFilter[i];\n        }\n    }\n    return contentAfterFilter;\n}\n\nfunction filter(logs) {\n    const text = logs ? logs : fullPageContent;\n    const filterInput = document.getElementById('filter-input').value;\n    const mode = document.getElementById('filter-select').value;\n    let content = {};\n    if (filterInput.length > 0 && mode !== 'all') {\n        const regex = new RegExp(filterInput);\n        switch (mode) {\n            case 'include':\n                content = filterByFunction(text, (value) => regex.test(value));\n                break;\n            case 'exclude':\n                content = filterByFunction(text, (value) => !regex.test(value));\n                break;\n            case 'before':\n                if (!filterMatched) {\n                    const filterBeforeResult = filterBefore(text, regex);\n                    content = filterBeforeResult.content;\n                    filterMatched = filterBeforeResult.matched;\n                }\n                break;\n            case 'after':\n                if (!filterMatched) {\n                    const filterAfterResult = filterAfter(text, regex);\n                    content = filterAfterResult.content;\n                    filterMatched = filterAfterResult.matched;\n                } else {\n                    content = text;\n                }\n                break;\n            default:\n                break;\n        }\n    } else {\n        content = text;\n    }\n\n    return content;\n}\n\nfunction filterByFunction(text, func) {\n    const content = {};\n    let counter = 0;\n    let innerCounter = 0;\n    while (true) {\n        const value = text[counter];\n        if (!value) {\n            break;\n        }\n        if (func(value)) {\n            content[innerCounter] = value;\n            innerCounter++;\n        }\n        counter++;\n    }\n    return content;\n}\n\nfunction filterBefore(text, regex) {\n    const content = {};\n    let counter = 0;\n    let matched = false;\n    while (true) {\n        const value = text[counter];\n        matched = regex.test(value);\n        if (!value || matched) {\n            break;\n        }\n        content[counter] = value;\n        counter++;\n    }\n    return { matched, content };\n}\n\nfunction filterAfter(text, regex) {\n    const content = {};\n    let counter = 0;\n    let innerCounter = 0;\n    let start = false;\n    let matched = false;\n    while (true) {\n        const value = text[counter];\n        if (!value) {\n            break;\n        }\n        matched = regex.test(value);\n        if (!start && matched) {\n            start = true;\n        }\n        if (start) {\n            content[innerCounter] = value;\n            innerCounter++;\n        }\n        counter++;\n    }\n    return { matched, content };\n}\n\nfunction emptyContent() {\n    const contentDiv = document.getElementById('innerLogPanel');\n    let i = contentDiv.childNodes.length;\n    while (i--) {\n        contentDiv.removeChild(contentDiv.firstChild);\n    }\n    contentDiv.innerHTML = `<code id='content' class='${isWrapEnabled() ? 'white-space-wrap' : 'white-space-pre'} position-relative'></code>`;\n}\n\nfunction renderByPagination(contentToAdd) {\n    if (contentToAdd && Object.keys(contentToAdd).length === 0) {\n        return;\n    }\n    const fullFilteredContent = isFilterEnabled() ? filteredContent : fullPageContent;\n    const totalRows = Object.keys(fullFilteredContent).length - 1;\n    const heightDiv = getDefaultDivHeightValue();\n    const currentPosition = document.getElementById('logPanel').scrollTop;\n    const referenceRow = Math.floor(currentPosition / heightDiv);\n    // identify rows range to draw\n    let lowerRange = referenceRow - 250 < 0 ? 0 : referenceRow - 250;\n    let upperRange = referenceRow + 250 > totalRows ? totalRows : referenceRow + 250;\n    let isPrepend = false;\n\n    const children = document.getElementById('content').children;\n    if (children.length !== 0) {\n        // identify rows range present in DOM\n        const lowestRowInDOM = parseInt(children.item(0).id);\n        const uppestRowInDOM = parseInt(children.item(children.length - 1).id);\n        if (lowerRange < lowestRowInDOM) {\n            if (upperRange >= lowestRowInDOM) {\n                removeChildren(upperRange + 1, uppestRowInDOM);\n                upperRange = lowestRowInDOM - 1;\n                isPrepend = true;\n                document.getElementById('content').style.top = `${lowerRange * heightDiv}px`;\n            } else {\n                emptyContent();\n                document.getElementById('content').style.top = `${lowerRange * heightDiv}px`;\n            }\n            const content = extractRowsToDraw(fullFilteredContent, lowerRange, upperRange);\n            render(beautifyLines(content), lowerRange, isPrepend);\n        } else if (upperRange > uppestRowInDOM) {\n            if (lowerRange <= uppestRowInDOM) {\n                removeChildren(lowestRowInDOM, lowerRange - 1);\n                document.getElementById('content').style.top = `${lowerRange * heightDiv}px`;\n                lowerRange = uppestRowInDOM + 1;\n            } else {\n                emptyContent();\n                document.getElementById('content').style.top = `${lowerRange * heightDiv}px`;\n            }\n            const content = extractRowsToDraw(fullFilteredContent, lowerRange, upperRange);\n            render(beautifyLines(content), lowerRange, isPrepend);\n        }\n    } else {\n        const content = extractRowsToDraw(fullFilteredContent, lowerRange, upperRange);\n        document.getElementById('content').style.top = `${lowerRange * heightDiv}px`;\n        render(beautifyLines(content), lowerRange, isPrepend);\n    }\n}\n\nfunction extractRowsToDraw(content, from, to) {\n    const contentExtracted = {};\n    for (let i = from; i <= to; i += 1) {\n        contentExtracted[i] = content[i];\n    }\n    return contentExtracted;\n}\n\nfunction beautifyLines(contentLines) {\n    const content = {};\n    if (Object.keys(contentLines).length === 0) {\n        return content;\n    }\n\n    const heightDiv = getDefaultDivHeightValue();\n    // eslint-disable-next-line prefer-const\n    for (let [key, value] of Object.entries(contentLines)) {\n        if (!value) {\n            continue;\n        }\n        value = value.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n        value = highlightWords(value);\n        value = /\\n$/.test(value) ? value : `${value}\\n`;\n        content[key] = `<div id=\"${key}\" style=\"min-height: ${heightDiv}px\">${value}</div>`;\n    }\n    return content;\n}\n\nfunction highlightWords(row) {\n    if (!schemaColors) {\n        return row;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < schemaColors.length; i += 1) {\n        const rule = schemaColors[i];\n        const regexp = new RegExp(rule.regex, \"gi\");\n        if (regexp.test(row)) {\n            row = row.replaceAll(regexp, repl);\n            row = row.replaceAll('#ruleColor', rule.color);\n        }\n    }\n    return row;\n}\n\nfunction repl() {\n    const match = arguments[0];\n    const offset = arguments[arguments.length - 2];\n    const originalString = arguments[arguments.length - 1];\n    if (!originalString) {\n        return match;\n    }\n    const indexOpenSpan = originalString.substring(0, offset + match.length).lastIndexOf(\"<span\");\n    const indexCloseSpan = originalString.substring(0, offset + match.length).lastIndexOf(\"</span>\");\n    if (indexOpenSpan === -1 || indexOpenSpan < indexCloseSpan) {\n        return `<span class=\"#ruleColor\">${match}</span>`;\n    } else {\n        return match;\n    }\n}\n\nfunction removeChildren(from, to) {\n    if (to < from) {\n        return;\n    }\n    for (let i=from; i<=to; i++) {\n        const toDelete = document.getElementById(i.toString());\n        if (toDelete) {\n            toDelete.remove();\n        }\n    }\n}\n\nfunction render(content, from, prepend) {\n    if (Object.keys(content).length === 0) {\n        const fragment = document.createRange().createContextualFragment('No logs ...');\n        document.getElementById('content').appendChild(fragment);\n    } else {\n        const contentToDisplay = concatenateObjectValuesAsString(content, from);\n        const fragment = document.createRange().createContextualFragment(contentToDisplay);\n        if (prepend) {\n            document.getElementById('content').prepend(fragment);\n        } else {\n            document.getElementById('content').appendChild(fragment);\n        }\n        if (isToBottom) {\n            scrollToBottom();\n        }\n    }\n}\n\nfunction concatenateObjectValuesAsString(object, ix) {\n    let valuesConcatenated = '';\n    while (true) {\n        const value = object[ix];\n        if (!value) {\n            break;\n        }\n        valuesConcatenated += value;\n        ix++;\n    }\n    return valuesConcatenated;\n}\n\nfunction scrollToBottom() {\n    document.getElementById('bottom').scrollIntoView();\n}\n\nfunction getContainer() {\n    const containersSelect = document.getElementById('containers-select');\n    if (containersSelect) {\n        return containersSelect.value;\n    }\n    return defaultContainer;\n}\n\nfunction isFollow() {\n    return document.getElementById('follow-chk').checked;\n}\n\nfunction getSinceDuration() {\n    const sinceType = document.getElementById('since-select').value;\n    const sinceInput = document.getElementById('since-input').value;\n    if (isNaN(sinceInput) || sinceInput <= 0 || sinceType.trim() === '') {\n        return 0;\n    }\n    return `${sinceInput}${sinceType}`;\n}\n\nfunction getTail() {\n    const tailValue = document.getElementById('tail-input').value;\n    if (isNaN(tailValue) || tailValue <= 0) {\n        return -1;\n    }\n    return tailValue;\n}\n\nfunction getToTerminal() {\n    return document.getElementById('terminal-chk').checked;\n}\n\nfunction isWrapEnabled() {\n    return document.getElementById('wrap-chk').checked;\n}\n\nfunction getDefaultDivHeightValue() {\n    return document.getElementById('follow-lbl').offsetHeight;\n}\n\n(function () {\n    init();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);